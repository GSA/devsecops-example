version: 2
jobs:
  validate_packer:
    docker:
      - image: hashicorp/packer:light
    steps:
      - checkout
      - run:
          name: Validate WordPress template
          command: packer validate -syntax-only packer/wordpress.json

  validate_terraform:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout

      - run:
          name: bootstrap - Set up Terraform
          command: terraform init -backend=false -input=false
          working_directory: ~/project/terraform/bootstrap
      - run:
          name: bootstrap - Validate Terraform
          command: terraform validate
          working_directory: ~/project/terraform/bootstrap

      - run:
          name: mgmt - Create Terraform variables file
          command: cp terraform.tfvars.example terraform.tfvars
          working_directory: ~/project/terraform/mgmt
      - run:
          name: mgmt - Set up Terraform
          command: terraform init -backend=false -input=false
          working_directory: ~/project/terraform/mgmt
      - run:
          name: mgmt - Validate Terraform
          command: terraform validate
          working_directory: ~/project/terraform/mgmt

      - run:
          name: env - Set up Terraform
          command: terraform init "-backend-config=bucket=$TF_ENV_BUCKET" -input=false
          working_directory: ~/project/terraform/env
      - run:
          name: env - Validate Terraform
          command: terraform validate
          working_directory: ~/project/terraform/env
      - persist_to_workspace:
          root: .
          paths:
            - ./*

  build_ami:
    docker:
      - image: 18fgsa/devsecops-builder:alpine
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Bootstrap the environment
          command: terraform apply -input=false -auto-approve -target=aws_route53_record.db
          working_directory: ~/project/terraform/env

      # this command fails if the requirements.yml is empty
      # - run:
      #     name: Download Ansible dependencies
      #     command: ansible-galaxy install -p ansible/roles -r ansible/requirements.yml

      - run:
          name: Build WordPress AMI
          command: |
            packer build \
              -var db_host=$(terraform output db_host) \
              -var db_name=$(terraform output db_name) \
              -var db_user=$(terraform output db_user) \
              -var "db_pass=${TF_VAR_db_pass}" \
              ../../packer/wordpress.json
          working_directory: ~/project/terraform/env

  # AMI builds are slow, so keeping the environment deploy separate so it can be re-run separately if needed
  deploy_env:
    docker:
      - image: 18fgsa/devsecops-builder:alpine
    steps:
      - attach_workspace:
          at: .

      - add_ssh_keys
      - run:
          name: Disable host key checking
          command: printf "\nHost *\n\tStrictHostKeyChecking no" >> ~/.ssh/config

      - run:
          name: Deploy the full environment
          command: terraform apply -input=false -auto-approve
          working_directory: ~/project/terraform/env

workflows:
  version: 2

  validate_and_deploy:
    jobs:
      - validate_packer
      - validate_terraform
      - build_ami:
          filters:
            branches:
              only: master
          requires:
            - validate_packer
            - validate_terraform
      - deploy_env:
          filters:
            branches:
              only: master
          requires:
            - build_ami
